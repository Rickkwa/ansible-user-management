---

- name: Import user inventory
  include_vars:
    file: "{{ um_user_inventory_file }}"

- name: Import group inventory
  include_vars:
    file: "{{ um_group_inventory_file }}"

- name: Update login.defs to set UID_MAX and GID_MAX to be less than uid_base and gid_base, respectively
  lineinfile:
    state: present
    dest: "/etc/login.defs"
    regexp: "^{{ item.field }}\\s+.*"
    line: "{{ item.field }}        {{ item.value }}"
    backup: true
  loop:
    - { field: "UID_MAX", value: "{{ um_uid_base - 1 }}" }
    - { field: "GID_MAX", value: "{{ um_gid_base - 1 }}" }

- name: Install sudo
  package:
    name: sudo
    state: present
  when: not ansible_check_mode

- name: Ensure /etc/sudoers.d/ exists
  file:
    path: "/etc/sudoers.d/"
    state: directory
    mode: 0755

- name: Enable sudoers.d
  lineinfile:
    dest: "/etc/sudoers"
    line: "#includedir /etc/sudoers.d"
    state: present
    validate: "visudo -cf %s"
  when: not ansible_check_mode

- name: Add stuff
  block:
    - name: Loop through group_inventory and add groups
      include_tasks: "add-group.yml"
      loop: "{{ um_group_inventory }}"
      loop_control:
        loop_var: current_group
      when:
        - ((group_names + ['all']) | intersect(current_group.present | default(['all']))) | length > 0
        - ((group_names + ['all']) | intersect(current_group.absent | default([]))) | length == 0

    - name: Loop through user_inventory and add users
      include_tasks: "add-user.yml"
      loop: "{{ um_user_inventory }}"
      loop_control:
        loop_var: current_user
      when:
        - ((group_names + ['all']) | intersect(current_user.present | default(['all']))) | length > 0
        - ((group_names + ['all']) | intersect(current_user.absent | default([]))) | length == 0

- name: Remove stuff
  block:
    - name: Loop through user_inventory and remove users
      include_tasks: "remove-user.yml"
      loop: "{{ um_user_inventory }}"
      loop_control:
        loop_var: current_user
      when: ((group_names + ['all']) | intersect(current_user.present | default(['all']))) | length <= 0 or
            ((group_names + ['all']) | intersect(current_user.absent | default([]))) | length > 0

    - name: Loop through group_inventory and remove groups
      include_tasks: "remove-group.yml"
      loop: "{{ um_group_inventory }}"
      loop_control:
        loop_var: current_group
      when: ((group_names + ['all']) | intersect(current_group.present | default(['all']))) | length <= 0 or
            ((group_names + ['all']) | intersect(current_group.absent | default([]))) | length > 0
